average_RTlog <- by(critical_data,critical_data$ID,function(x) {
y <- subset(x, select =c('RTlog'))
apply(y, 2,mean, na.rm = TRUE)
}
)
median(average_RTlog)
lower_average_RTlog <- subset(average_RTlog, average_RTlog[] < 6.390461,select=c('ID'))
upper_average_RTlog <- subset(average_RTlog, average_RTlog[] > 6.390461,select=c('ID'))
low_vec <- unlist(dimnames(lower_average_RTlog)[[1]])
upper_vec <- unlist(dimnames(upper_average_RTlog)[[1]])
low_vec
upper_vec
#critical_data <- critical_data[!critical_data$ID %in% vec, ]
lower_bar_data <- summarySE(critical_data[!critical_data$ID %in% upper_vec,], measurevar="Error", groupvars=c("Condition"))
upper_bar_data <- summarySE(critical_data[!critical_data$ID %in% low_vec,], measurevar="Error", groupvars=c("Condition"))
#lower_bar_data <- new_bar_data[!new_bar_data$ID %in% upper_vec,]
#lower_bar_data
#upper_bar_data <- new_bar_data[!new_bar_data$ID %in% low_vec,]
#bar_data$Error <- rep(1,length(bar_data$Correct)) - bar_data$Correct
#bar_data <- summarySE(bar_data, measurevar="Error",groupvars=c('Condition'))
#bar_data
#library(ggplot2)
#grabbed from the web
low_p<- ggplot(lower_bar_data, aes(x=Condition, y=Error)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
geom_errorbar(aes(ymin=Error-ci, ymax=Error+ci), width=.2,
position=position_dodge(.9))
upper_p<- ggplot(upper_bar_data, aes(x=Condition, y=Error)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
geom_errorbar(aes(ymin=Error-ci, ymax=Error+ci), width=.2,
position=position_dodge(.9))
#error rates for all participants below median (average RTlog) on critical items
print(low_p)
#error rates for all participants above median
print(upper_p)
clean_data <- within(clean_data, Matrix_num <- relevel(Matrix_num, ref="s"))
clean_data <- within(clean_data, Match <- relevel(Match, ref="1"))
#library(glm)
clean_data$Matrix_num <- factor(clean_data$Matrix_num)
clean_data$Match <- factor(clean_data$Match)
clean_data$phrase_type <- factor(clean_data$phrase_type)
clean_data$cMatrix_num <- myCenter(clean_data$Matrix_num)
clean_data$cMatch <- myCenter(clean_data$Match)
clean_data$cphrase_type <- myCenter(clean_data$phrase_type)
#clean_data
#log <- lmer(Correct ~ Matrix_num*Match + phrase_type + (1|ID) +(1|Item),data=clean_data[clean_data$Condition != "filler",])
log <- glmer(Correct ~ Matrix_num*Match*phrase_type + (1|ID) +(1|Item),family=binomial(link='logit'),data=clean_data[clean_data$Condition != "filler",])
#summary(log)
#log <- glm(Correct ~ cMatrix_num*cMatch*cphrase_type,data=clean_data[clean_data$Condition != 'filler',])
summary(log)
exp_data <- read.csv('exp1_results.csv')
exp_data$Condition <- as.factor(exp_data$Condition)
exp_data$Error <- as.integer(as.logical(!exp_data$Correct))
#exp_data
filler_acc <- by(exp_data,exp_data$ID,function(x) {
y <- subset(x, x$Condition == "filler", select =c('Correct'))
apply(y, 2,mean, na.rm = TRUE)
}
)
filler_acc <- subset(filler_acc, filler_acc[] < .60,select=c('ID'))
vec <- unlist(dimnames(filler_acc)[[1]])
vec
clean_data <- exp_data[!exp_data$ID %in% vec, ]
exp_data <- read.csv('exp1_results.csv')
exp_data$Condition <- as.factor(exp_data$Condition)
exp_data$Error <- as.integer(as.logical(!exp_data$Correct))
#exp_data
filler_acc <- by(exp_data,exp_data$ID,function(x) {
y <- subset(x, x$Condition == "filler", select =c('Correct'))
apply(y, 2,mean, na.rm = TRUE)
}
)
filler_acc <- subset(filler_acc, filler_acc[] < .60,select=c('ID'))
vec <- unlist(dimnames(filler_acc)[[1]])
vec
clean_data <- exp_data[!exp_data$ID %in% vec, ]
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
myCenter= function(x) {
if (is.numeric(x)) { return(x - mean(x, na.rm=T)) }
if (is.factor(x)) {
x= as.numeric(x)
return(x - mean(x, na.rm=T))
}
if (is.data.frame(x) || is.matrix(x)) {
m= matrix(nrow=nrow(x), ncol=ncol(x))
colnames(m)= paste("c", colnames(x), sep="")
for (i in 1:ncol(x)) {
m[,i]= myCenter(x[,i])
}
return(as.data.frame(m))
}
}
filler_acc <- by(exp_data,exp_data$ID,function(x) {
y <- subset(x, x$Condition == "filler", select =c('Correct'))
apply(y, 2,mean, na.rm = TRUE)
}
)
filler_acc <- subset(filler_acc, filler_acc[] < .60,select=c('ID'))
vec <- unlist(dimnames(filler_acc)[[1]])
vec
clean_data <- exp_data[!exp_data$ID %in% vec, ]
lists <- unique(clean_data$List)
lists
filler_acc <- by(exp_data,exp_data$ID,function(x) {
y <- subset(x, x$Condition == "filler", select =c('Correct'))
apply(y, 2,mean, na.rm = TRUE)
}
)
filler_acc <- subset(filler_acc, filler_acc[] < .60,select=c('ID'))
vec <- unlist(dimnames(filler_acc)[[1]])
vec
clean_data <- exp_data[!exp_data$ID %in% vec, ]
lists <- unique(clean_data$List)
lists
min <- 1000
for(listnum in lists){
this <- length(unique(clean_data[clean_data$List == listnum,]$ID))
if (this < min) min <- this
min
}
filler_acc <- by(exp_data,exp_data$ID,function(x) {
y <- subset(x, x$Condition == "filler", select =c('Correct'))
apply(y, 2,mean, na.rm = TRUE)
}
)
filler_acc <- subset(filler_acc, filler_acc[] < .60,select=c('ID'))
vec <- unlist(dimnames(filler_acc)[[1]])
vec
clean_data <- exp_data[!exp_data$ID %in% vec, ]
lists <- unique(clean_data$List)
lists
min <- 1000
for(listnum in lists){
this <- length(unique(clean_data[clean_data$List == listnum,]$ID))
if (this < min) min <- this
min
}
filler_acc <- by(exp_data,exp_data$ID,function(x) {
y <- subset(x, x$Condition == "filler", select =c('Correct'))
apply(y, 2,mean, na.rm = TRUE)
}
)
filler_acc <- subset(filler_acc, filler_acc[] < .60,select=c('ID'))
vec <- unlist(dimnames(filler_acc)[[1]])
vec
clean_data <- exp_data[!exp_data$ID %in% vec, ]
lists <- unique(clean_data$List)
lists
min <- 1000
for(listnum in lists){
this <- length(unique(clean_data[clean_data$List == listnum,]$ID))
if (this < min) min <- this
"echo"
}
filler_acc <- by(exp_data,exp_data$ID,function(x) {
y <- subset(x, x$Condition == "filler", select =c('Correct'))
apply(y, 2,mean, na.rm = TRUE)
}
)
filler_acc <- subset(filler_acc, filler_acc[] < .60,select=c('ID'))
vec <- unlist(dimnames(filler_acc)[[1]])
vec
clean_data <- exp_data[!exp_data$ID %in% vec, ]
lists <- unique(clean_data$List)
lists
min <- 1000
for(listnum in lists){
this <- length(unique(clean_data[clean_data$List == listnum,]$ID))
'echo'
if (this < min) min <- this
"echo"
}
filler_acc <- by(exp_data,exp_data$ID,function(x) {
y <- subset(x, x$Condition == "filler", select =c('Correct'))
apply(y, 2,mean, na.rm = TRUE)
}
)
filler_acc <- subset(filler_acc, filler_acc[] < .60,select=c('ID'))
vec <- unlist(dimnames(filler_acc)[[1]])
vec
clean_data <- exp_data[!exp_data$ID %in% vec, ]
lists <- unique(clean_data$List)
lists
min <- 1000
for(listnum in lists){
this <- length(unique(clean_data[clean_data$List == listnum,]$ID))
print('echo')
if (this < min) min <- this
"echo"
}
filler_acc <- by(exp_data,exp_data$ID,function(x) {
y <- subset(x, x$Condition == "filler", select =c('Correct'))
apply(y, 2,mean, na.rm = TRUE)
}
)
filler_acc <- subset(filler_acc, filler_acc[] < .60,select=c('ID'))
vec <- unlist(dimnames(filler_acc)[[1]])
vec
clean_data <- exp_data[!exp_data$ID %in% vec, ]
lists <- unique(clean_data$List)
lists
min <- 1000
for(listnum in lists){
this <- length(unique(clean_data[clean_data$List == listnum,]$ID))
if (this < min) min <- this
print(min)
}
filler_acc <- by(exp_data,exp_data$ID,function(x) {
y <- subset(x, x$Condition == "filler", select =c('Correct'))
apply(y, 2,mean, na.rm = TRUE)
}
)
filler_acc <- subset(filler_acc, filler_acc[] < .60,select=c('ID','List'))
vec <- unlist(dimnames(filler_acc)[[1]])
vec
clean_data <- exp_data[!exp_data$ID %in% vec, ]
lists <- unique(clean_data$List)
lists
min <- 1000
for(listnum in lists){
this <- length(unique(clean_data[clean_data$List == listnum,]$ID))
if (this < min) min <- this
}
filler_acc <- by(exp_data,exp_data$ID,function(x) {
y <- subset(x, x$Condition == "filler", select =c('Correct'))
apply(y, 2,mean, na.rm = TRUE)
}
)
filler_acc <- subset(filler_acc, filler_acc[] < .60,select=c('ID','List'))
filler_acc
vec <- unlist(dimnames(filler_acc)[[1]])
vec
clean_data <- exp_data[!exp_data$ID %in% vec, ]
lists <- unique(clean_data$List)
lists
min <- 1000
for(listnum in lists){
this <- length(unique(clean_data[clean_data$List == listnum,]$ID))
if (this < min) min <- this
}
filler_acc <- by(exp_data,exp_data$ID,function(x) {
y <- subset(x, x$Condition == "filler", select =c('Correct','List'))
apply(y, 2,mean, na.rm = TRUE)
}
)
filler_acc <- subset(filler_acc, filler_acc[] < .60,select=c('ID'))
filler_acc <- by(exp_data,exp_data$ID,function(x) {
y <- subset(x, x$Condition == "filler", select =c('Correct'))
apply(y, 2,mean, na.rm = TRUE)
}
)
filler_acc <- subset(filler_acc, filler_acc[] < .60,select=c('ID'))
filler_acc
vec <- unlist(dimnames(filler_acc)[[1]])
vec
clean_data <- exp_data[!exp_data$ID %in% vec, ]
lists <- unique(clean_data$List)
lists
min <- 1000
for(listnum in lists){
this <- length(unique(clean_data[clean_data$List == listnum,]$ID))
if (this < min) min <- this
}
filler_acc <- by(exp_data,exp_data$ID,function(x) {
y <- subset(x, x$Condition == "filler", select =c('Correct'))
apply(y, 2,mean, na.rm = TRUE)
}
)
filler_acc <- subset(filler_acc, filler_acc[] < .60,select=c('ID'))
filler_acc
vec <- unlist(dimnames(filler_acc)[[1]])
vec
clean_data <- exp_data[!exp_data$ID %in% vec, ]
lists <- unique(clean_data$List)
lists
min <- 1000
for(listnum in lists){
this <- length(unique(clean_data[clean_data$List == listnum,]$ID))
if (this < min) min <- this
}
data_tab <- as.table(clean_data)
filler_acc <- by(exp_data,exp_data$ID,function(x) {
y <- subset(x, x$Condition == "filler", select =c('Correct'))
apply(y, 2,mean, na.rm = TRUE)
}
)
filler_acc <- subset(filler_acc, filler_acc[] < .60,select=c('ID'))
#filler_acc
vec <- unlist(dimnames(filler_acc)[[1]])
vec
clean_data <- exp_data[!exp_data$ID %in% vec, ]
lists <- unique(clean_data$List)
lists
min <- 1000
for(listnum in lists){
this <- length(unique(clean_data[clean_data$List == listnum,]$ID))
if (this < min) min <- this
}
aggregate(. ~ ID,clean_data['Correct',clean_data$Condition == "filler"],mean)
filler_acc <- by(exp_data,exp_data$ID,function(x) {
y <- subset(x, x$Condition == "filler", select =c('Correct'))
apply(y, 2,mean, na.rm = TRUE)
}
)
filler_acc <- subset(filler_acc, filler_acc[] < .60,select=c('ID'))
#filler_acc
vec <- unlist(dimnames(filler_acc)[[1]])
vec
clean_data <- exp_data[!exp_data$ID %in% vec, ]
lists <- unique(clean_data$List)
lists
min <- 1000
for(listnum in lists){
this <- length(unique(clean_data[clean_data$List == listnum,]$ID))
if (this < min) min <- this
}
aggregate(. ~ ID,clean_data['Correct',clean_data$Condition == "filler",],mean)
filler_acc <- by(exp_data,exp_data$ID,function(x) {
y <- subset(x, x$Condition == "filler", select =c('Correct'))
apply(y, 2,mean, na.rm = TRUE)
}
)
filler_acc <- subset(filler_acc, filler_acc[] < .60,select=c('ID'))
#filler_acc
vec <- unlist(dimnames(filler_acc)[[1]])
vec
clean_data <- exp_data[!exp_data$ID %in% vec, ]
lists <- unique(clean_data$List)
lists
min <- 1000
for(listnum in lists){
this <- length(unique(clean_data[clean_data$List == listnum,]$ID))
if (this < min) min <- this
}
aggregate(. ~ ID,clean_data['Correct'],mean)
filler_acc <- by(exp_data,exp_data$ID,function(x) {
y <- subset(x, x$Condition == "filler", select =c('Correct'))
apply(y, 2,mean, na.rm = TRUE)
}
)
filler_acc <- subset(filler_acc, filler_acc[] < .60,select=c('ID'))
#filler_acc
vec <- unlist(dimnames(filler_acc)[[1]])
vec
clean_data <- exp_data[!exp_data$ID %in% vec, ]
lists <- unique(clean_data$List)
lists
min <- 1000
for(listnum in lists){
this <- length(unique(clean_data[clean_data$List == listnum,]$ID))
if (this < min) min <- this
}
aggregate(clean_data['Correct'],list(clean_data$ID),mean)
filler_acc <- by(exp_data,exp_data$ID,function(x) {
y <- subset(x, x$Condition == "filler", select =c('Correct'))
apply(y, 2,mean, na.rm = TRUE)
}
)
filler_acc <- subset(filler_acc, filler_acc[] < .60,select=c('ID'))
#filler_acc
vec <- unlist(dimnames(filler_acc)[[1]])
vec
clean_data <- exp_data[!exp_data$ID %in% vec, ]
lists <- unique(clean_data$List)
lists
min <- 1000
for(listnum in lists){
this <- length(unique(clean_data[clean_data$List == listnum,]$ID))
if (this < min) min <- this
}
filler_data <- clean_data[clean_data$Condition == "filler",]
aggregate(filler_data['Correct'],list(filler_data$ID),mean)
filler_acc <- by(exp_data,exp_data$ID,function(x) {
y <- subset(x, x$Condition == "filler", select =c('Correct'))
apply(y, 2,mean, na.rm = TRUE)
}
)
filler_acc <- subset(filler_acc, filler_acc[] < .60,select=c('ID'))
#filler_acc
vec <- unlist(dimnames(filler_acc)[[1]])
vec
clean_data <- exp_data[!exp_data$ID %in% vec, ]
lists <- unique(clean_data$List)
lists
min <- 1000
for(listnum in lists){
this <- length(unique(clean_data[clean_data$List == listnum,]$ID))
if (this < min) min <- this
}
filler_data <- clean_data[clean_data$Condition == "filler",]
aggregate(filler_data['Correct'],list(ID=filler_data$ID),mean)
filler_acc <- by(exp_data,exp_data$ID,function(x) {
y <- subset(x, x$Condition == "filler", select =c('Correct'))
apply(y, 2,mean, na.rm = TRUE)
}
)
filler_acc <- subset(filler_acc, filler_acc[] < .60,select=c('ID'))
#filler_acc
vec <- unlist(dimnames(filler_acc)[[1]])
vec
clean_data <- exp_data[!exp_data$ID %in% vec, ]
lists <- unique(clean_data$List)
lists
min <- 1000
for(listnum in lists){
this <- length(unique(clean_data[clean_data$List == listnum,]$ID))
if (this < min) min <- this
}
filler_data <- clean_data[clean_data$Condition == "filler",]
for (listnum in lists) {
aggregate(filler_data[filler_data$List == listnum,]['Correct'],list(ID=filler_data$ID),mean)
print(aggregate)
}
filler_acc <- by(exp_data,exp_data$ID,function(x) {
y <- subset(x, x$Condition == "filler", select =c('Correct'))
apply(y, 2,mean, na.rm = TRUE)
}
)
filler_acc <- subset(filler_acc, filler_acc[] < .60,select=c('ID'))
#filler_acc
vec <- unlist(dimnames(filler_acc)[[1]])
vec
clean_data <- exp_data[!exp_data$ID %in% vec, ]
lists <- unique(clean_data$List)
lists
min <- 1000
for(listnum in lists){
this <- length(unique(clean_data[clean_data$List == listnum,]$ID))
if (this < min) min <- this
}
filler_data <- clean_data[clean_data$Condition == "filler",]
for (listnum in lists) {
temp <- filler_data[filler_data$List == listnum,]
aggregate(filler_data['Correct'],list(ID=filler_data$ID),mean)
print(aggregate)
}
filler_acc <- by(exp_data,exp_data$ID,function(x) {
y <- subset(x, x$Condition == "filler", select =c('Correct'))
apply(y, 2,mean, na.rm = TRUE)
}
)
filler_acc <- subset(filler_acc, filler_acc[] < .60,select=c('ID'))
#filler_acc
vec <- unlist(dimnames(filler_acc)[[1]])
vec
clean_data <- exp_data[!exp_data$ID %in% vec, ]
lists <- unique(clean_data$List)
lists
min <- 1000
for(listnum in lists){
this <- length(unique(clean_data[clean_data$List == listnum,]$ID))
if (this < min) min <- this
}
filler_data <- clean_data[clean_data$Condition == "filler",]
for (listnum in lists) {
temp <- filler_data[filler_data$List == listnum,]
temp2 <- aggregate(filler_data['Correct'],list(ID=filler_data$ID),mean)
print(temp2)
}
filler_acc <- by(exp_data,exp_data$ID,function(x) {
y <- subset(x, x$Condition == "filler", select =c('Correct'))
apply(y, 2,mean, na.rm = TRUE)
}
)
filler_acc <- subset(filler_acc, filler_acc[] < .60,select=c('ID'))
#filler_acc
vec <- unlist(dimnames(filler_acc)[[1]])
vec
clean_data <- exp_data[!exp_data$ID %in% vec, ]
lists <- unique(clean_data$List)
lists
min <- 1000
for(listnum in lists){
this <- length(unique(clean_data[clean_data$List == listnum,]$ID))
if (this < min) min <- this
}
filler_data <- clean_data[clean_data$Condition == "filler",]
for (listnum in lists) {
temp <- filler_data[filler_data$List == listnum,]
temp2 <- aggregate(temp['Correct'],list(ID=temp$ID),mean)
print(temp2)
}
